name: Code Formatting & Linting

on: [push, pull_request]

jobs:
  format-and-lint:
    name: Format and lint code
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install isort pylint ruff yapf

    - name: Sort imports with isort (Google style)
      env:
        MAX_LINE_LENGTH: 120
      run: isort nexusml tests --profile google --line-length ${{ env.MAX_LINE_LENGTH }} --thirdparty docker

    - name: Check code format with YAPF (Google style)
      # YAPF gets config from the `.style.yapf` file
      run: |
        DIFF_OUTPUT=$(yapf --recursive --diff nexusml tests)
        if [ -n "$DIFF_OUTPUT" ]; then
          echo "Formatting issues found:"
          echo "$DIFF_OUTPUT"
          exit 1
        fi

    - name: Lint code with Ruff (fast analysis)
      run: ruff check --ignore F405,F403,E731,F841,E741 nexusml tests
      # F405: Name may be undefined (from a wildcard import). # These warnings may indicate areas to consider for refactoring.
      # F403: 'from module import *' used; unable to detect undefined names. # These warnings may indicate areas to consider for refactoring.
      # E731: Do not assign a lambda expression, use a def. # These warnings may indicate areas to consider for refactoring.
      # F841: Local variable is assigned to but never used. # These warnings may indicate areas to consider for refactoring.
      # E741: Do not use variables with ambiguous names like l, O, or I. # These warnings may indicate areas to consider for refactoring.

    - name: Lint `nexusml` with Pylint (exhaustive analysis)
      env:
        # `ACCEPTED_EXIT_CODES` is a space-separated list of accepted Pylint exit codes.
        # Check Pylint exit codes at https://pylint.readthedocs.io/en/latest/user_guide/messages/index.html
        ACCEPTED_EXIT_CODES: ""  # Adjust as necessary
      # Run Pylint, capturing its exit code only if it fails. If Pylint succeeds, the next command won't execute.
      run: |
        PYLINT_EXIT_CODE=0
        pylint --verbose --rcfile=pylintrc nexusml ||  PYLINT_EXIT_CODE=$((PYLINT_EXIT_CODE | $?))
        pylint --verbose --rcfile=nexusml/engine/pylintrc nexusml/engine ||  PYLINT_EXIT_CODE=$((PYLINT_EXIT_CODE | $?))
        pylint --verbose --rcfile=nexusml/engine/models/pylintrc nexusml/engine/models ||  PYLINT_EXIT_CODE=$((PYLINT_EXIT_CODE | $?))
        pylint --verbose --rcfile=nexusml/database/pylintrc nexusml/database ||  PYLINT_EXIT_CODE=$((PYLINT_EXIT_CODE | $?))
        pylint --verbose --rcfile=nexusml/api/schemas/pylintrc nexusml/api/schemas ||  PYLINT_EXIT_CODE=$((PYLINT_EXIT_CODE | $?))

        echo "Pylint (nexusml) exited with code $PYLINT_EXIT_CODE."

        # Convert the space-separated list of accepted exit codes from the environment variable into an array.
        IFS=' ' read -r -a accepted_codes_array <<< "${{ env.ACCEPTED_EXIT_CODES }}"

        # Calculate the bitwise OR sum of all accepted exit codes. 
        # This represents the combination of all tolerable issue types.
        ACCEPTED_SUM=0
        for code in "${accepted_codes_array[@]}"; do
            # This aggregates the bits from each accepted code, creating a binary mask of acceptable issue types.
            ACCEPTED_SUM=$((ACCEPTED_SUM | code))
        done

        # Perform a bitwise AND with the bitwise NOT of the ACCEPTED_SUM against the PYLINT_EXIT_CODE.
        # This operation isolates bits in PYLINT_EXIT_CODE not covered by ACCEPTED_SUM (i.e., unacceptable issues).
        # If the result is 0, it means all issues found by Pylint are within the accepted range.
        if [ $((PYLINT_EXIT_CODE & ~ACCEPTED_SUM)) -eq 0 ]; then
          echo "Pylint (nexusml) issues are within the tolerated range."
        else
          # If the result is not 0, there are issues outside of the tolerated types, 
          # so we exit with the Pylint exit code.
          echo "Pylint (nexusml) reported unacceptable issues."
          exit $PYLINT_EXIT_CODE
        fi

    - name: Lint `tests` with Pylint (exhaustive analysis)
      env:
        ACCEPTED_EXIT_CODES: ""  # Adjust as necessary
      # We apply the same logic for tests, but disabling some warnings to avoid pytest-related false positives.
      run: |
        pylint --verbose --rcfile=tests/pylintrc tests || PYLINT_EXIT_CODE=$?

        if [ -z "$PYLINT_EXIT_CODE" ]; then
          PYLINT_EXIT_CODE=0
        fi
        echo "Pylint (tests) exited with code $PYLINT_EXIT_CODE."

        IFS=' ' read -r -a accepted_codes_array <<< "${{ env.ACCEPTED_EXIT_CODES }}"

        ACCEPTED_SUM=0
        for code in "${accepted_codes_array[@]}"; do
            ACCEPTED_SUM=$((ACCEPTED_SUM | code))
        done

        if [ $((PYLINT_EXIT_CODE & ~ACCEPTED_SUM)) -eq 0 ]; then
          echo "Pylint (tests) issues are within the tolerated range."
        else
          echo "Pylint (tests) reported unacceptable issues."
          exit $PYLINT_EXIT_CODE
        fi
